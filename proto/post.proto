syntax = "proto3";

package kittens.post;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

message Post {
  string id = 1;
  string text = 2;
  string authorId = 3;
  string authorDisplayName = 4;
  string conversationId = 5;
  string conversationTitle = 6;
  string inReplyTo = 7;
  google.protobuf.Timestamp created = 8;
  google.protobuf.Timestamp updated = 9;
  bool retracted = 10;
}

message CreatePostRequest {
  string text = 1;
  // string authorId = 2;
  // TODO this is temporary until we have proper auth
  string authorDisplayName = 992;
  string conversationId = 3;
  string inReplyTo = 4;
}

message PostsByUserRequest {
  string authorId = 1;
  // Keep them streaming until the call disconnects
  bool watch = 2;
  // Only posts newer than the given id:
  string after = 3;
  // Only posts from (inclusive) a date onwards:
  google.protobuf.Timestamp since = 4;
}

message ThreadRequest {
  string postId = 1;
  // Direct replies only
  bool shallow = 2;
  // Keep them streaming until the call disconnects
  bool watch = 3;
  // Only posts newer than the given id:
  string after = 4;
  // Only posts from (inclusive) a date onwards:
  google.protobuf.Timestamp since = 5;
}

//////////////////////////////////////////////////////////////////////////
// admin/testing APIs
// these should be controlled with strict ACLs

message SetupContextRequest {
  string name = 1;
  repeated Post posts = 2;
}

//////////////////////////////////////////////////////////////////////////
// service definition

service Posts {
  // Create a new post
  rpc Create (CreatePostRequest) returns (Post);
  // All posts by a given user
  rpc PostsByUser (PostsByUserRequest) returns (stream Post);
  // A post and all its replies
  rpc Thread (ThreadRequest) returns (stream Post);
  ////////////////////////////////////////////////////////////////////////
  // admin/testing
  rpc SetupContext (SetupContextRequest) returns (google.protobuf.Empty);
}
